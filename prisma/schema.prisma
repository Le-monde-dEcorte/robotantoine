datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// TODO: Get rid of this once the new database is in place
model mondecorte {
  user_id        String  @unique
  custom_role_id String?
  points         Int?    @default(0)
  social_credit  Int?    @default(500)
  vote           String?
}

model GuildsSettings {
  guildId        String             @id
  modRoles       ModRole[]
  adminRoles     AdminRole[]
  levelingTracks LevelingTrack[]
  logChannels    LogChannel[]
  cases          Case[]
  sanitizer      SanitizerSettings?
}

model SanitizerSettings {
  guildId      String   @id
  enabled      Boolean  @default(false)
  ignoredRoles String[]

  settings GuildsSettings @relation(fields: [guildId], references: [guildId], onDelete: Cascade, onUpdate: NoAction)
}

model ModRole {
  guildId String
  roleId  String @id

  settings GuildsSettings @relation(fields: [guildId], references: [guildId], onDelete: Cascade, onUpdate: NoAction)
}

model AdminRole {
  guildId String
  roleId  String @id

  settings GuildsSettings @relation(fields: [guildId], references: [guildId], onDelete: Cascade, onUpdate: NoAction)
}

model TrackBlacklistedRole {
  guildId String
  trackId Int
  roleId  String @id

  track LevelingTrack @relation(fields: [trackId], references: [trackId], onDelete: Cascade, onUpdate: NoAction)
}

model TrackWhitelistedRole {
  guildId String
  trackId Int
  roleId  String @id

  track LevelingTrack @relation(fields: [trackId], references: [trackId], onDelete: Cascade, onUpdate: NoAction)
}

model TrackRoleMultiplier {
  guildId    String
  trackId    Int
  roleId     String @id
  multiplier Int    @default(1)

  track LevelingTrack @relation(fields: [trackId], references: [trackId], onDelete: Cascade, onUpdate: NoAction)
}

model TrackChannelMultiplier {
  guildId    String
  trackId    Int
  channelId  String @id
  multiplier Int    @default(1)

  track LevelingTrack @relation(fields: [trackId], references: [trackId], onDelete: Cascade, onUpdate: NoAction)
}

model LevelingTrack {
  guildId            String
  trackId            Int                      @id @default(autoincrement())
  trackName          String
  type               LevelingTrackType
  blacklistedRoles   TrackBlacklistedRole[]
  whitelistedRoles   TrackWhitelistedRole[]
  roleMultipliers    TrackRoleMultiplier[]
  channelMultipliers TrackChannelMultiplier[]
  globalMultiplier   Int                      @default(1)

  settings GuildsSettings @relation(fields: [guildId], references: [guildId], onDelete: Cascade, onUpdate: NoAction)
}

enum LevelingTrackType {
  points
  levels
}

// Website

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Watcher

enum LogChannelType {
  mod
  server
}

enum CaseType {
  ban
  unban
  kick
  timeout
  untimeout
}

model LogChannel {
  guildId      String
  channelId    String         @id
  type         LogChannelType
  webhookId    String
  webhookToken String
  threadId     String?

  settings GuildsSettings @relation(fields: [guildId], references: [guildId], onDelete: Cascade, onUpdate: NoAction)

  // MOD
  timeout   Boolean @default(false)
  untimeout Boolean @default(false)
  kick      Boolean @default(false)
  ban       Boolean @default(false)
  unban     Boolean @default(false)

  // SERVER
  messageEdit            Boolean @default(false)
  messageDelete          Boolean @default(false)
  memberJoin             Boolean @default(false)
  memberLeave            Boolean @default(false)
  memberNicknameChange   Boolean @default(false)
  memberRoleChange       Boolean @default(false)
  memberAvatarChange     Boolean @default(false)
  memberUsernameChange   Boolean @default(false)
  memberVoiceStateUpdate Boolean @default(false)
  roleCreate             Boolean @default(false)
  roleDelete             Boolean @default(false)
  roleUpdate             Boolean @default(false)
  channelCreate          Boolean @default(false)
  channelDelete          Boolean @default(false)
  channelUpdate          Boolean @default(false)
  emojiCreate            Boolean @default(false)
  emojiDelete            Boolean @default(false)
  emojiUpdate            Boolean @default(false)
  inviteCreate           Boolean @default(false)
  inviteDelete           Boolean @default(false)
}

model Case {
  guildId    String
  caseNumber Int      @id @default(autoincrement())
  messageId  String
  userId     String
  reason     String?
  type       CaseType
  modId      String?

  settings GuildsSettings @relation(fields: [guildId], references: [guildId], onDelete: Cascade, onUpdate: NoAction)
}
